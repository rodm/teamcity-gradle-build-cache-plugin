
import org.gradle.api.internal.tasks.TaskExecutionOutcome
import org.gradle.api.internal.tasks.TaskStateInternal

class TaskExecutionStatisticsPublisher extends BuildAdapter implements TaskExecutionListener {

    private final Logger logger
    private final Map<TaskExecutionOutcome, Integer> taskCounts = [:]
    private final Map<TaskExecutionOutcome, String> statisticsKey = [:]

    TaskExecutionStatisticsPublisher(Logger logger) {
        this.logger = logger
        TaskExecutionOutcome.values().each { outcome ->
            taskCounts.put(outcome, new Integer(0))
        }
        statisticsKey.put(TaskExecutionOutcome.EXECUTED, 'GradleTasksExecuted')
        statisticsKey.put(TaskExecutionOutcome.FROM_CACHE, 'GradleTasksFromCache')
        statisticsKey.put(TaskExecutionOutcome.NO_SOURCE, 'GradleTasksNoSource')
        statisticsKey.put(TaskExecutionOutcome.SKIPPED, 'GradleTasksSkipped')
        statisticsKey.put(TaskExecutionOutcome.UP_TO_DATE, 'GradleTasksUpToDate')
    }

    @Override
    void buildFinished(BuildResult result) {
        taskCounts.each { key, value ->
            logger.lifecycle("##teamcity[buildStatisticValue key='${statisticsKey.get(key)}' value='${value}']")
        }
        logger.lifecycle("##teamcity[buildStatisticValue key='GradleTasksTotal' value='${taskCounts.values().sum()}']")
    }

    @Override
    void beforeExecute(Task task) {}

    @Override
    void afterExecute(Task task, TaskState state) {
        TaskStateInternal stateInternal = (TaskStateInternal) state
        TaskExecutionOutcome outcome = stateInternal.getOutcome()
        taskCounts.put(outcome, taskCounts.get(outcome) + 1)
    }
}

initscript {
    ext.hazelcastPluginVersion = System.properties['teamcity.build.cache.plugin.version']
    if (ext.hazelcastPluginVersion == null) {
        ext.hazelcastPluginVersion = GradleVersion.current() >= GradleVersion.version('4.0-milestone-2') ? '0.11' : '0.9'
    }
    logger.info("Applying Hazelcast plugin version: ${hazelcastPluginVersion}")

    repositories {
        maven {
            url 'https://repo.gradle.org/gradle/libs/'
        }
        mavenCentral()
    }

    dependencies {
        classpath "org.gradle.caching.hazelcast:gradle-hazelcast-plugin:${hazelcastPluginVersion}"
    }
}

if (GradleVersion.current() >= GradleVersion.version("3.5")) {
    gradle.addListener(new TaskExecutionStatisticsPublisher(logger))
    gradle.settingsEvaluated { settings ->
        def pluginClass = Class.forName('org.gradle.caching.hazelcast.HazelcastPlugin')
        def cacheClass = Class.forName('org.gradle.caching.hazelcast.HazelcastBuildCache')
        settings.apply(plugin: pluginClass)
        settings.buildCache {
            local(cacheClass) {
                push = true
            }
        }
    }
} else {
    def message = "Gradle Build Cache is disabled. This feature requires Gradle 3.5 or later, current version is ${GradleVersion.current()}."
    logger.lifecycle("##teamcity[message text='${message}' status='WARNING']")
}
